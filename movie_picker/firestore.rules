rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users: owner-only read/write
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Public readable user profiles for discovery (non-sensitive subset)
    // If you keep this, ensure only non-sensitive fields are in the document or split to /publicUsers
    // match /publicUsers/{userId} { allow read: if true; }

    // Friendships
    match /friendships/{friendshipId} {
      allow read, write: if request.auth != null &&
        (resource.data.requesterUid == request.auth.uid ||
         resource.data.receiverUid == request.auth.uid);
    }

    // Bookmarks (owner-only)
    match /bookmarks/{bookmarkId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Watched (owner-only)
    match /watched/{watchedId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Recommendations between two users
    match /recommendations/{recommendationId} {
      allow read, write: if request.auth != null &&
        (resource.data.fromUserId == request.auth.uid || resource.data.toUserId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.fromUserId == request.auth.uid;
    }

    // Platform movies (read-only)
    match /platformMovies/{platformId} {
      allow read: if request.auth != null;
    }

    // Reviews: readable to signed-in users; writes restricted to owner
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
} 