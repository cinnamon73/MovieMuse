// Mocks generated by Mockito 5.4.6 from annotations
// in movie_picker/test/widgets/swipeable_movie_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_picker/models/movie.dart' as _i4;
import 'package:movie_picker/services/movie_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MovieService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieService extends _i1.Mock implements _i2.MovieService {
  MockMovieService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get cacheSize =>
      (super.noSuchMethod(Invocation.getter(#cacheSize), returnValue: 0)
          as int);

  @override
  bool get hasEnoughMovies =>
      (super.noSuchMethod(
            Invocation.getter(#hasEnoughMovies),
            returnValue: false,
          )
          as bool);

  @override
  void setRecommendationService(dynamic recommendationService) =>
      super.noSuchMethod(
        Invocation.method(#setRecommendationService, [recommendationService]),
        returnValueForMissingStub: null,
      );

  @override
  void setUserService(dynamic userService) => super.noSuchMethod(
    Invocation.method(#setUserService, [userService]),
    returnValueForMissingStub: null,
  );

  @override
  void setLanguage(String? language) => super.noSuchMethod(
    Invocation.method(#setLanguage, [language]),
    returnValueForMissingStub: null,
  );

  @override
  void setVoteAverageRange(double? min, double? max) => super.noSuchMethod(
    Invocation.method(#setVoteAverageRange, [min, max]),
    returnValueForMissingStub: null,
  );

  @override
  void setReleaseYear(int? year) => super.noSuchMethod(
    Invocation.method(#setReleaseYear, [year]),
    returnValueForMissingStub: null,
  );

  @override
  void setRuntimeRange(int? min, int? max) => super.noSuchMethod(
    Invocation.method(#setRuntimeRange, [min, max]),
    returnValueForMissingStub: null,
  );

  @override
  void setReleaseStatus(String? status) => super.noSuchMethod(
    Invocation.method(#setReleaseStatus, [status]),
    returnValueForMissingStub: null,
  );

  @override
  void setPerson(String? person, String? personType) => super.noSuchMethod(
    Invocation.method(#setPerson, [person, personType]),
    returnValueForMissingStub: null,
  );

  @override
  void resetFilters() => super.noSuchMethod(
    Invocation.method(#resetFilters, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<void> preloadMovies({
    int? targetCount = 200,
    List<String>? preferredGenres,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#preloadMovies, [], {
              #targetCount: targetCount,
              #preferredGenres: preferredGenres,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Movie>> findMoviesWithFilters({
    List<String>? selectedGenres,
    String? language,
    String? timePeriod,
    double? minRating,
    Set<int>? excludeIds,
    int? targetCount = 100,
    int? maxPages = 500,
    String? person,
    String? personType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#findMoviesWithFilters, [], {
              #selectedGenres: selectedGenres,
              #language: language,
              #timePeriod: timePeriod,
              #minRating: minRating,
              #excludeIds: excludeIds,
              #targetCount: targetCount,
              #maxPages: maxPages,
              #person: person,
              #personType: personType,
            }),
            returnValue: _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
          )
          as _i3.Future<List<_i4.Movie>>);

  @override
  _i3.Future<List<_i4.Movie>> filterCachedMovies({
    List<String>? selectedGenres,
    String? language,
    String? timePeriod,
    double? minRating,
    Set<int>? excludeIds,
    String? person,
    String? personType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#filterCachedMovies, [], {
              #selectedGenres: selectedGenres,
              #language: language,
              #timePeriod: timePeriod,
              #minRating: minRating,
              #excludeIds: excludeIds,
              #person: person,
              #personType: personType,
            }),
            returnValue: _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
          )
          as _i3.Future<List<_i4.Movie>>);

  @override
  _i3.Future<void> maybePreloadMore({
    int? threshold = 50,
    List<String>? preferredGenres,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#maybePreloadMore, [], {
              #threshold: threshold,
              #preferredGenres: preferredGenres,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  List<String> getAllGenres() =>
      (super.noSuchMethod(
            Invocation.method(#getAllGenres, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i3.Future<List<String>> fetchCast(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchCast, [movieId]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<Map<String, dynamic>> fetchCastAndCrew(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchCastAndCrew, [movieId]),
            returnValue: _i3.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<bool> movieHasPerson(
    int? movieId,
    String? personName,
    String? personType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#movieHasPerson, [
              movieId,
              personName,
              personType,
            ]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Movie>> searchMoviesByPerson(
    String? personName, {
    int? personId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchMoviesByPerson,
              [personName],
              {#personId: personId},
            ),
            returnValue: _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
          )
          as _i3.Future<List<_i4.Movie>>);

  @override
  _i3.Future<Map<String, dynamic>?> getPersonDetails(int? personId) =>
      (super.noSuchMethod(
            Invocation.method(#getPersonDetails, [personId]),
            returnValue: _i3.Future<Map<String, dynamic>?>.value(),
          )
          as _i3.Future<Map<String, dynamic>?>);

  @override
  _i3.Future<List<String>> fetchMovieKeywords(int? movieId) =>
      (super.noSuchMethod(
            Invocation.method(#fetchMovieKeywords, [movieId]),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);

  @override
  _i3.Future<void> fetchKeywordsForMovies(List<_i4.Movie>? movies) =>
      (super.noSuchMethod(
            Invocation.method(#fetchKeywordsForMovies, [movies]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.Movie>> getFilteredMovies({
    List<String>? selectedGenres,
    bool? refresh = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFilteredMovies, [], {
              #selectedGenres: selectedGenres,
              #refresh: refresh,
            }),
            returnValue: _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
          )
          as _i3.Future<List<_i4.Movie>>);

  @override
  _i3.Future<List<_i4.Movie>> loadSpecificPage({
    List<String>? selectedGenres,
    required int? page,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadSpecificPage, [], {
              #selectedGenres: selectedGenres,
              #page: page,
            }),
            returnValue: _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
          )
          as _i3.Future<List<_i4.Movie>>);

  @override
  double getMovieScore(_i4.Movie? movie) =>
      (super.noSuchMethod(
            Invocation.method(#getMovieScore, [movie]),
            returnValue: 0.0,
          )
          as double);

  @override
  bool isHighQualityMovie(_i4.Movie? movie) =>
      (super.noSuchMethod(
            Invocation.method(#isHighQualityMovie, [movie]),
            returnValue: false,
          )
          as bool);

  @override
  List<_i4.Movie> sortMoviesByQuality(
    List<_i4.Movie>? movies, {
    dynamic userPreferences,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #sortMoviesByQuality,
              [movies],
              {#userPreferences: userPreferences},
            ),
            returnValue: <_i4.Movie>[],
          )
          as List<_i4.Movie>);

  @override
  _i3.Future<List<_i4.Movie>> searchMovies(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchMovies, [query]),
            returnValue: _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
          )
          as _i3.Future<List<_i4.Movie>>);

  @override
  double scoreMovie(_i4.Movie? movie, {required dynamic userPreferences}) =>
      (super.noSuchMethod(
            Invocation.method(
              #scoreMovie,
              [movie],
              {#userPreferences: userPreferences},
            ),
            returnValue: 0.0,
          )
          as double);
}
